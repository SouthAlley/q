name: delproxy

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"

env:
  TZ: Asia/Shanghai

jobs:
  Fork-Filter-list:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4.1.0
        with:
          repository: SouthAlley/q
          path: q-repo
          
      - name: 下载文件到 Surge
        run: |
           download_and_merge() {
             local file_path=$1
             local url=$2
    
             # 创建目标文件所在的目录（如果不存在）
             mkdir -p "q-repo/rule/$(dirname "$file_path")"
    
             # 使用 curl 下载文件并追加到目标文件
             curl -L "$url" >> "q-repo/rule/$file_path"
             }

             declare -A file_path_url=(
               ["MyBlockAds.list"]="ad/attach/del.ini https://raw.githubusercontent.com/RuCu6/QuanX/main/Rules/MyBlockAds.list"
               ["StreamingRule.list"]="global/attach/del.ini https://raw.githubusercontent.com/SouthAlley/z/main/Surge/StreamingRule/StreamingRule.list"
               ["AnotherRule.list"]="proxy/attach/del.ini https://raw.githubusercontent.com/SouthAlley/z/main/Surge/StreamingRule/StreamingRule.list"
               ["fenliuxiuzheng"]="ad/attach/del.ini https://raw.githubusercontent.com/vokins/ad/main/dr.list"
               
               )

               # 循环处理每个文件或规则
               for item in "${!file_path_url[@]}"; do
               # 分割路径和 URL
               IFS=' ' read -r path url <<< "${file_path_url[$item]}"
    
               # 调用函数下载并合并文件内容
               download_and_merge "$path" "$url"
            done

      - name: 编辑规则文件 rule/ad
        run: |
           # 定义文件列表
           files=("q-repo/rule/ad/attach/del.ini" 
                  "q-repo/rule/global/attach/del.ini" 
                  "q-repo/rule/proxy/attach/del.ini")

           # 循环处理每个文件
           for file in "${files[@]}"; do
             if [ -f "$file" ]; then
               # 修改逗号为单独的逗号
               sed -i 's/, /,/g' "$file"
               # 替换 host 为 DOMAIN，忽略大小写
               sed -i -e 's/host,/DOMAIN,/gi' "$file"
               sed -i -e 's/host-suffix,/DOMAIN-SUFFIX,/gi' "$file"
               sed -i -e 's/host-keyword,/DOMAIN-KEYWORD,/gi' "$file"
               sed -i 's/ip-cidr,/IP-CIDR,/gi' "$file"
               sed -i 's/ip6-cidr,/IP-CIDR6,/gi' "$file"
               sed -i 's/user-agent,/USER-AGENT,/g' "$file"
               # 删除不必要的部分
               sed -i 's/\([^,]*,[^,]*\),.*/\1/g' "$file"
               # 如果包含 IP-CIDR 且不包含 no-resolve 则添加 no-resolve
               sed -i '/IP-CIDR/ {/no-resolve/! s/$/,no-resolve/}; /IP-CIDR6/ {/no-resolve/! s/$/,no-resolve/}' "$file"
               # 删除分号
               sed -i 's/;//g' "$file"
               # 删除注释
               sed -i 's/#.*//' "$file"
               # 删除空行
               sed -i '/^[[:space:]]*$/d' "$file"
            else
              echo "$file 未找到。"
            fi
           done

      - name: 删除匹配行从原始文件
        run: |
          # 定义规则类型（ad、proxy、global）
          rule_types=("ad" "proxy" "global")

          for rule_type in "${rule_types[@]}"; do
              # 定义原始文件和删除规则文件的路径
              original_file="q-repo/rule/${rule_type}/attach/del.ini"
              del_file="q-repo/local/del/del${rule_type}.ini"

              # 判断删除规则文件是否存在
              if [ -f "$del_file" ]; then
                   # 删除匹配行并备份原始文件
                   grep -vFf "$del_file" "$original_file" > "$original_file.tmp" && mv "$original_file.tmp" "$original_file"

                   # 输出删除操作完成的消息
                   echo "删除${rule_type}操作完成。"
              else
                   # 如果删除规则文件不存在，输出相应的消息
                   echo "$del_file 不存在。跳过删除${rule_type}操作。"
              fi
          done

      - name: 复制自定义规则到 Surge
        run: |
          # 定义规则类型（ad、proxy、global）
          rule_types=("ad" "proxy" "global")

          for rule_type in "${rule_types[@]}"; do
            # 定义目标文件路径
            target_file="q-repo/rule/${rule_type}/attach/del.ini"

            # 判断自定义规则文件是否存在
            if [ -f "q-repo/local/add/add${rule_type}.ini" ]; then
              # 如果目标文件存在，将自定义规则附加到目标文件
              cat "q-repo/local/add/add${rule_type}.ini" >> "$target_file"
              # 输出添加操作完成的消息
              echo "添加${rule_type}操作完成。"
           else
             # 如果自定义规则文件不存在，输出相应的消息
             echo "q-repo/local/add/add${rule_type}.ini 不存在。跳过添加${rule_type}操作。"
           fi
          done

      - name: Add and Commit changes
        run: |
          cd q-repo
          if [[ -n $(git status -s) ]]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add "rule/ad/attach/*" "rule/global/attach/*" "rule/proxy/attach/*"
            git commit -m "Update rules"
            git push origin HEAD
          else
            echo "No changes to commit."
          fi
