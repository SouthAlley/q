name: xg

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"


jobs:
  Fork-Filter-list:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4.1.0
        with:
          repository: SouthAlley/q
          path: q-repo
          
      - name: 下载文件
        run: |
           # 定义关联数组，键为文件名，值为路径和 URL 的组合
           declare -A file_path_url=(
               ["dlerproxy.list"]="xg/dlerproxy.list https://raw.githubusercontent.com/dler-io/Rules/main/Surge/Surge%203/Provider/Proxy.list"
               
               )

           # 循环处理每个文件
           for file in "${!file_path_url[@]}"; do
               # 分割路径和 URL
               IFS=' ' read -r path url <<< "${file_path_url[$file]}"
    
               # 创建目标文件所在的目录（如果不存在）
               mkdir -p "q-repo/${path%/*}"
    
               # 使用 curl 下载文件到目标路径
               curl -L -o "q-repo/$path" "$url"

               # 得到 rule_type
               IFS='/' read -r _ rule_type _ <<< "${path%.list}"

               # 定义原始文件和删除规则文件的路径
               original_file="q-repo/$path"
               del_file="q-repo/xg/del/del${rule_type}.ini"
               add_file="q-repo/xg/add/add${rule_type}.ini"

               # 处理规则的函数
               process_rules() {
                   # 修改, 为,
                   sed -i 's/, /,/g' "$original_file"
                   # 删除规则
                   awk '{sub("host-wildcard.*$", ""); print}' "$original_file" > tmpfile
                   mv tmpfile "$original_file"
                   # 修改为大写
                   sed -i -e 's/host,/DOMAIN,/gi' -e 's/host-suffix,/DOMAIN-SUFFIX,/gi' -e 's/host-keyword,/DOMAIN-KEYWORD,/gi' "$original_file"
                   sed -i 's/ip-cidr,/IP-CIDR,/gi' "$original_file"
                   sed -i 's/ip6-cidr,/IP-CIDR6,/gi' "$original_file"
                   sed -i 's/user-agent,/USER-AGENT,/g' "$original_file"
                   # 删除不必要的部分
                   sed -i 's/\([^,]*,[^,]*\),.*/\1/g' "$original_file"
                   # 如果包含IP-CIDR且不包含,no-resolve 则添加,no-resolve
                   sed -i '/IP-CIDR/ {/no-resolve/! s/$/,no-resolve/}; /IP-CIDR6/ {/no-resolve/! s/$/,no-resolve/}' "$original_file"
                   # 修改;为#
                   sed -i 's/;/# /g' "$original_file"
                   }
                   
                   # 处理 _Set.list 文件
               if [[ "$file" == *_Set.list ]]; then
                   if [ -f "$original_file" ]; then
                        # 删除 DOMAIN 和 DOMAIN-SUFFIX 行
                        awk '!/^(DOMAIN|DOMAIN-SUFFIX),/' "$original_file" > tmpfile
                        mv tmpfile "$original_file"
                        # 删除注释
                        sed -i 's/#.*//' "$original_file"
                        # 删除空行
                        sed -i '/^[[:space:]]*$/d' "$original_file"
                        echo "处理 $original_file 完成。"
        
                        # 运行规则处理函数
                        process_rules
                    else
                        echo "$original_file not found."
                    fi
                           
               elif [[ "$file" == *_Domain.list ]]; then
                        # DOMAIN, 移除
                        sed -i 's/DOMAIN,//g' "$original_file"
                        # DOMAIN-SUFFIX, 替换为 .
                        sed -i 's/DOMAIN-SUFFIX,/./g' "$original_file"
                        # 删除规则
                        sed -i '/^\(PROCESS-NAME\|DOMAIN-KEYWORD\|IP-CIDR\|IP-CIDR6\|IP-ASN\|URL-REGEX\|USER-AGENT\|OR\|AND\),.*$/d' "$original_file"
                        # 删除注释
                        sed -i 's/#.*//' "$original_file"
                        # 删除空行
                        sed -i '/^[[:space:]]*$/d' "$original_file"
                        echo "处理 $original_file 完成."

                        # 运行规则处理函数
                        process_rules

               else
                   # 处理其他规则修改
                   if [ -f "$original_file" ]; then
                        # 运行规则处理函数
                        process_rules
                        # 其他规则处理代码（如果有）
                        echo "运行其他规则处理（示例）"
                   else
                        echo "$original_file not found."
                   fi
               fi

                   

               # 判断删除规则文件是否存在
               if [ -f "$del_file" ]; then
                    # 删除匹配行并备份原始文件
                    grep -vFf "$del_file" "$original_file" > "$original_file.tmp" && mv "$original_file.tmp" "$original_file"

                    # 输出删除操作完成的消息
                    echo "删除${rule_type}操作完成。"
               else
                    # 如果删除规则文件不存在，输出相应的消息
                    echo "$del_file 不存在。跳过删除${rule_type}操作。"
               fi
               
               # 判断自定义规则文件是否存在
               if [ -f "$add_file" ]; then
                   # 如果目标文件存在，将自定义规则附加到目标文件
                   cat "$add_file" >> "$original_file"
                   # 输出添加操作完成的消息
                   echo "添加${rule_type}操作完成。"
               else
                   # 如果自定义规则文件不存在，输出相应的消息
                   echo "$add_file 不存在。跳过添加${rule_type}操作。"
               fi
           done


      - name: Add and Commit changes
        run: |
          cd q-repo
          if [[ -n $(git status -s) ]]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add .
            git commit -m "Update rules"
            git push
          else
            echo "No changes to commit."
          fi
